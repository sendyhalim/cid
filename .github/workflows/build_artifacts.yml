# We could use `@actions-rs/cargo` Action ability to automatically install `cross` tool
# in order to compile our application for some unusual targets.

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - '*' # Build on every tag release

name: build_artifacts

jobs:
  build:
    name: Build
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-apple-darwin, x86_64-unknown-linux-musl]
        include:
          - target: x86_64-apple-darwin
            release_bin_name: cid.macos
          - target: x86_64-unknown-linux-musl
            release_bin_name: cid.linux
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: (Linux) Add rust target x86_64-unknown-linux-musl
        run: rustup target add x86_64-unknown-linux-musl
        if: matrix.target == 'x86_64-unknown-linux-musl'

      - name: (Linux) Install dependencies
        run: |
          brew install filosottile/musl-cross/musl-cross && \
          ln -s /usr/local/bin/x86_64-linux-musl-gcc /usr/local/bin/musl-gcc
        if: matrix.target == 'x86_64-unknown-linux-musl'

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ matrix.target }}

      - name: Zip build result
        run: |
          zip --junk-paths ./target/${{ matrix.target }}/release/cid.zip ./target/${{ matrix.target }}/release/cid

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's
          # ID to get its outputs object, which include a `upload_url`.
          # See below blog post for more info:
          # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/cid.zip
          asset_name: ${{ matrix.release_bin_name }}
          asset_content_type: application/zip
