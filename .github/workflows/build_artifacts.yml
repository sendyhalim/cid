# We could use `@actions-rs/cargo` Action ability to automatically install `cross` tool
# in order to compile our application for some unusual targets.

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: build_artifacts

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        include:
          - os: macos-latest
            release_bin_name: cid.macos
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            release_bin_name: cid.linux
            target: x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: (Linux) Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
          pkg-config \
          libssl-dev
        if: matrix.os == 'ubuntu-latest'

      - name: (Linux) Add rust target x86_64-unknown-linux-musl
        run: rustup target add x86_64-unknown-linux-musl
        if: matrix.os == 'ubuntu-latest'

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ matrix.target }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's
          # ID to get its outputs object, which include a `upload_url`.
          # See below blog post for more info:
          # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/cid
          asset_name: ${{ matrix.release_bin_name }}
